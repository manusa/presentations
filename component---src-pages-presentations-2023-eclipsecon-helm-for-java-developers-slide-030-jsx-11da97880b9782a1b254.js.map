{"version":3,"file":"component---src-pages-presentations-2023-eclipsecon-helm-for-java-developers-slide-030-jsx-11da97880b9782a1b254.js","mappings":"qLAiCA,WAAeA,EAAAA,EAAAA,IA7BEC,IAEbC,EAAAA,cAACC,EAAAA,GAAAA,GAA4B,CAACC,MAAO,EAAGC,MAAM,6BAC5CH,EAAAA,cAAA,OAAKI,MAAO,CAACC,OAAQ,OAAQC,QAAS,OAAQC,IAAK,OAAQC,WAAY,WACrER,EAAAA,cAAA,UACEA,EAAAA,cAAA,UAAI,aAEFA,EAAAA,cAAA,UACEA,EAAAA,cAAA,UAAI,kDACJA,EAAAA,cAAA,UAAI,iBAAcA,EAAAA,cAAA,cAAQ,QAAa,cAG3CA,EAAAA,cAAA,UAAI,aAEFA,EAAAA,cAAA,UACEA,EAAAA,cAAA,UAAI,qBACJA,EAAAA,cAAA,UAAI,WAAQA,EAAAA,cAAA,cAAQ,QAAa,mBAGrCA,EAAAA,cAAA,UAAI,+BAINA,EAAAA,cAACC,EAAAA,GAAAA,GAA6B,CAACG,MAAO,CAACC,OAAQ,YAOrD,kBAAkBJ,EAAAA,GAAAA,eAClB,kBAAkBA,EAAAA,GAAAA,e,mIChCb,MAAMQ,EAA2BC,GAAeC,GACnDD,EAAcC,EAAQ,SAAW,UAExBC,EAAyBF,GAAeC,GACjDD,IAAgBC,EAAQ,SAAW,UAE1BE,EAA4BH,GAAeC,GACpDD,EAAcC,EAAQ,SAAW,UAkDrC,KAhDA,SAAuBG,EAAkBC,EAAcC,EAAUC,GAC/D,YADyE,IAAVA,IAAAA,EAAa,GACrEC,IAAiB,OAAZC,GAAMD,EAChB,MAAM,EAACR,EAAY,EAACU,IAAkBC,EAAAA,EAAAA,UAAS,GACzCC,EAAmBC,IACvB,OAAQA,EAAMC,KACZ,IAAK,OACL,IAAK,YACCd,EAAc,EAChBU,EAAeV,EAAc,IAE7Be,EAAAA,EAAAA,IAASV,GAEX,MACF,IAAK,QACL,IAAK,aACCL,EAAcO,EAChBG,EAAeV,EAAc,IAE7Be,EAAAA,EAAAA,IAAST,GAEX,MACF,IAAK,KACCO,EAAMG,SAAWH,EAAMI,WACzBC,SAASC,KAAKC,kBAAkB,CAACC,aAAc,SAASC,MAAMC,QAAQC,OACtEX,EAAMY,kBAER,MACF,IAAK,MACL,IAAK,SACCP,SAASQ,mBACXR,SAASS,iBAAiBL,MAAMC,QAAQC,QAE1CT,EAAAA,EAAAA,IAAS,OAYf,OAPAa,EAAAA,EAAAA,WAAU,KACRV,SAASW,iBAAiB,UAAWjB,GAAiB,GAC/C,KACLM,SAASY,oBAAoB,UAAWlB,GAAiB,KAE1D,CAACZ,IAEGV,EAAAA,cAACc,EAAgB2B,OAAAC,OAAA,GAAKvB,EAAK,CAAET,YAAaA,KAErD,C","sources":["webpack://@marcnuri/presentations/./src/pages/presentations/2023-eclipsecon-helm-for-java-developers/slide-030.jsx","webpack://@marcnuri/presentations/./src/components/slide-controls/slide-controls.jsx"],"sourcesContent":["import React from 'react';\nimport slideControls from '../../../components/slide-controls/slide-controls';\nimport {EclipseCon2023} from '../../../components';\n\nconst Slide030 = () => {\n  return (\n    <EclipseCon2023.SlideTemplate slide={3} title='Inner Loop vs. Outer Loop'>\n      <div style={{height: '100%', display: 'flex', gap: '3rem', alignItems: 'center'}}>\n        <ul>\n          <li>\n            Inner Loop\n            <ul>\n              <li>Developer's cycle before application is shared</li>\n              <li>Feedback loop <strong>must</strong> be fast</li>\n            </ul>\n          </li>\n          <li>\n            Outer Loop\n            <ul>\n              <li>After commit-push</li>\n              <li>CI/CD - <strong>must</strong> be automated</li>\n            </ul>\n          </li>\n          <li>\n            Cloud/K8s very challenging\n          </li>\n        </ul>\n        <EclipseCon2023.InnerOuterLoop style={{height: '100%'}} />\n      </div>\n    </EclipseCon2023.SlideTemplate>\n  );\n};\n\nexport default slideControls(Slide030,\n  `/presentations/${EclipseCon2023.SLUG}/slide-020`,\n  `/presentations/${EclipseCon2023.SLUG}/slide-040`);\n","import React, {useState, useEffect} from 'react';\nimport {navigate} from 'gatsby';\n\nexport const visibleClassNameFromStep = currentStep => step =>\n  ((currentStep < step) ? 'hidden' : 'visible');\n\nexport const visibleClassNameInStep = currentStep => step =>\n  ((currentStep !== step) ? 'hidden' : 'visible');\n\nexport const visibleClassNameUntilStep = currentStep => step =>\n  ((currentStep > step) ? 'hidden' : 'visible');\n\nfunction slideControls(WrappedComponent, previousPage, nextPage, totalSteps = 1) {\n  return ({...props}) => {\n    const [currentStep, setCurrentStep] = useState(1);\n    const handleOnKeyDown = (event) => {\n      switch (event.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          if (currentStep > 1) {\n            setCurrentStep(currentStep - 1);\n          } else {\n            navigate(previousPage);\n          }\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          if (currentStep < totalSteps) {\n            setCurrentStep(currentStep + 1);\n          } else {\n            navigate(nextPage);\n          }\n          break;\n        case 'f':\n          if (event.metaKey || event.ctrlKey) {\n            document.body.requestFullscreen({navigationUI: 'hide'}).catch(console.error)\n            event.preventDefault();\n          }\n          break;\n        case 'Esc':\n        case 'Escape':\n          if (document.fullscreenElement) {\n            document.exitFullscreen().catch(console.error);\n          }\n          navigate('/');\n          break;\n        default:\n      }\n    };\n    useEffect(() => {\n      document.addEventListener('keydown', handleOnKeyDown, false);\n      return () => {\n        document.removeEventListener('keydown', handleOnKeyDown, false);\n      };\n    }, [currentStep]);\n\n    return <WrappedComponent {...props} currentStep={currentStep} />;\n  }\n}\n\nexport default slideControls;\n"],"names":["slideControls","Slide030","React","EclipseCon2023","slide","title","style","height","display","gap","alignItems","visibleClassNameFromStep","currentStep","step","visibleClassNameInStep","visibleClassNameUntilStep","WrappedComponent","previousPage","nextPage","totalSteps","_ref","props","setCurrentStep","useState","handleOnKeyDown","event","key","navigate","metaKey","ctrlKey","document","body","requestFullscreen","navigationUI","catch","console","error","preventDefault","fullscreenElement","exitFullscreen","useEffect","addEventListener","removeEventListener","Object","assign"],"sourceRoot":""}