{"version":3,"file":"component---src-pages-presentations-mock-mvc-in-action-index-jsx-21e2cabb55b6807d9096.js","mappings":"qLAKA,MAAMA,EAAQ,qBAcd,WAAeC,EAAAA,EAAAA,IAZSC,IACtBC,EAAAA,cAAA,OAAKC,UAAW,sBACdD,EAAAA,cAACE,EAAAA,EAAM,KACLF,EAAAA,cAAA,aAAQH,IAEVG,EAAAA,cAAA,WACEA,EAAAA,cAAA,MAAIC,UAAW,SAAUJ,GACzBG,EAAAA,cAAA,MAAIC,UAAW,YAAY,eAKa,IAAK,2C,mIChB5C,MAAME,EAA2BC,GAAeC,GACnDD,EAAcC,EAAQ,SAAW,UAExBC,EAAyBF,GAAeC,GACjDD,IAAgBC,EAAQ,SAAW,UAE1BE,EAA4BH,GAAeC,GACpDD,EAAcC,EAAQ,SAAW,UAyCrC,KAvCA,SAAuBG,EAAkBC,EAAcC,EAAUC,GAC/D,YADyE,IAAVA,IAAAA,EAAa,GACrEC,IAAiB,OAAZC,GAAMD,EAChB,MAAM,EAACR,EAAY,EAACU,IAAkBC,EAAAA,EAAAA,UAAS,GACzCC,EAAmBC,IACvB,OAAQA,EAAMC,KACZ,IAAK,OACL,IAAK,YACCd,EAAc,EAChBU,EAAeV,EAAc,IAE7Be,EAAAA,EAAAA,IAASV,GAEX,MACF,IAAK,QACL,IAAK,aACCL,EAAcO,EAChBG,EAAeV,EAAc,IAE7Be,EAAAA,EAAAA,IAAST,GAEX,MACF,IAAK,MACL,IAAK,UACHS,EAAAA,EAAAA,IAAS,OAYf,OAPAC,EAAAA,EAAAA,WAAU,KACRC,SAASC,iBAAiB,UAAWN,GAAiB,GAC/C,KACLK,SAASE,oBAAoB,UAAWP,GAAiB,KAE1D,CAACZ,IAEGJ,EAAAA,cAACQ,EAAgBgB,OAAAC,OAAA,GAAKZ,EAAK,CAAET,YAAaA,KAErD,C","sources":["webpack://@marcnuri/presentations/./src/pages/presentations/mock-mvc-in-action/index.jsx","webpack://@marcnuri/presentations/./src/components/slide-controls/slide-controls.jsx"],"sourcesContent":["import React from 'react';\nimport {Helmet} from 'react-helmet';\nimport slideControls from '../../../components/slide-controls/slide-controls';\nimport './index.scss';\n\nconst TITLE = 'MockMVC in Action!';\n\nconst MockMvcInAction = () => (\n  <div className={'mock-mvc-in-action'}>\n    <Helmet>\n      <title>{TITLE}</title>\n    </Helmet>\n    <div>\n      <h1 className={'title'}>{TITLE}</h1>\n      <h2 className={'subtitle'}>Marc Nuri</h2>\n    </div>\n  </div>\n);\n\nexport default slideControls(MockMvcInAction, '/', '/presentations/mock-mvc-in-action/slide1');\n","import React, {useState, useEffect} from 'react';\nimport {navigate} from 'gatsby';\n\nexport const visibleClassNameFromStep = currentStep => step =>\n  ((currentStep < step) ? 'hidden' : 'visible');\n\nexport const visibleClassNameInStep = currentStep => step =>\n  ((currentStep !== step) ? 'hidden' : 'visible');\n\nexport const visibleClassNameUntilStep = currentStep => step =>\n  ((currentStep > step) ? 'hidden' : 'visible');\n\nfunction slideControls(WrappedComponent, previousPage, nextPage, totalSteps = 1) {\n  return ({...props}) => {\n    const [currentStep, setCurrentStep] = useState(1);\n    const handleOnKeyDown = (event) => {\n      switch (event.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          if (currentStep > 1) {\n            setCurrentStep(currentStep - 1);\n          } else {\n            navigate(previousPage);\n          }\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          if (currentStep < totalSteps) {\n            setCurrentStep(currentStep + 1);\n          } else {\n            navigate(nextPage);\n          }\n          break;\n        case 'Esc':\n        case 'Escape':\n          navigate('/');\n          break;\n        default:\n      }\n    };\n    useEffect(() => {\n      document.addEventListener('keydown', handleOnKeyDown, false);\n      return () => {\n        document.removeEventListener('keydown', handleOnKeyDown, false);\n      };\n    }, [currentStep]);\n\n    return <WrappedComponent {...props} currentStep={currentStep} />;\n  }\n}\n\nexport default slideControls;\n"],"names":["TITLE","slideControls","MockMvcInAction","React","className","Helmet","visibleClassNameFromStep","currentStep","step","visibleClassNameInStep","visibleClassNameUntilStep","WrappedComponent","previousPage","nextPage","totalSteps","_ref","props","setCurrentStep","useState","handleOnKeyDown","event","key","navigate","useEffect","document","addEventListener","removeEventListener","Object","assign"],"sourceRoot":""}