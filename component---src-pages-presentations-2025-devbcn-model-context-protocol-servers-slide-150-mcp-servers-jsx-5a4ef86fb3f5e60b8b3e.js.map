{"version":3,"file":"component---src-pages-presentations-2025-devbcn-model-context-protocol-servers-slide-150-mcp-servers-jsx-5a4ef86fb3f5e60b8b3e.js","mappings":"oLAIA,MAAMA,EAAMC,IAAA,IAAC,KAACC,EAAI,MAAEC,GAAMF,EAAA,OACxBG,EAAAA,cAAA,OAAKC,MAAO,CAACC,QAAS,OAAQC,cAAe,SAAUC,WAAY,SAAUC,eAAgB,eAC3FC,WAAYC,EAAAA,GAAAA,GAAoB,KAAMC,MAAO,QAASC,OAAQ,QAASC,aAAc,WAErFV,EAAAA,cAAA,OAAKC,MAAO,CAACU,SAAU,SAAUb,GACjCE,EAAAA,cAAA,OAAKC,MAAO,CAACW,MAAO,QAASD,SAAU,SAAUE,UAAW,WAAYd,KAwB5E,WAAee,EAAAA,EAAAA,IApBEC,IAEbf,EAAAA,cAACO,EAAAA,GAAAA,GAAwB,CACvBS,MAAO,GACPjB,MAAM,2BACNkB,SAAUV,EAAAA,GAAAA,IAEVP,EAAAA,cAAA,OAAKC,MAAO,CAACQ,OAAQ,OAAQD,MAAO,OAAQN,QAAS,OAAQE,WAAY,SAAUC,eAAgB,iBACjGL,EAAAA,cAACJ,EAAG,CAACE,KAAK,IAAIC,MAAM,aACpBC,EAAAA,cAACJ,EAAG,CAACE,KAAK,MAAMC,MAAM,4BACtBC,EAAAA,cAACJ,EAAG,CAACE,KAAK,QAAQC,MAAM,yBACxBC,EAAAA,cAACJ,EAAG,CAACE,KAAK,KAAKC,MAAM,0BACrBC,EAAAA,cAACJ,EAAG,CAACE,KAAK,KAAKC,MAAM,iBACrBC,EAAAA,cAACJ,EAAG,CAACE,KAAK,KAAKC,MAAM,4BACrBC,EAAAA,cAACJ,EAAG,CAACE,KAAK,KAAKC,MAAM,kBAO3B,kBAAkBQ,EAAAA,GAAAA,4BAClB,kBAAkBA,EAAAA,GAAAA,oCAClB,E,mICjCK,MAAMW,EAA2BC,GAAeC,GACnDD,EAAcC,EAAQ,SAAW,UAExBC,EAAyBF,GAAeC,GACjDD,IAAgBC,EAAQ,SAAW,UAE1BE,EAA4BH,GAAeC,GACpDD,EAAcC,EAAQ,SAAW,UAkDrC,KAhDA,SAAuBG,EAAkBC,EAAcC,EAAUC,GAC/D,YADyE,IAAVA,IAAAA,EAAa,GACrE7B,IAAiB,OAAZ8B,GAAM9B,EAChB,MAAM,EAACsB,EAAY,EAACS,IAAkBC,EAAAA,EAAAA,UAAS,GACzCC,EAAmBC,IACvB,OAAQA,EAAMC,KACZ,IAAK,OACL,IAAK,YACCb,EAAc,EAChBS,EAAeT,EAAc,IAE7Bc,EAAAA,EAAAA,IAAST,GAEX,MACF,IAAK,QACL,IAAK,aACCL,EAAcO,EAChBE,EAAeT,EAAc,IAE7Bc,EAAAA,EAAAA,IAASR,GAEX,MACF,IAAK,KACCM,EAAMG,SAAWH,EAAMI,WACzBC,SAASC,KAAKC,kBAAkB,CAACC,aAAc,SAASC,MAAMC,QAAQC,OACtEX,EAAMY,kBAER,MACF,IAAK,MACL,IAAK,SACCP,SAASQ,mBACXR,SAASS,iBAAiBL,MAAMC,QAAQC,QAE1CT,EAAAA,EAAAA,IAAS,OAYf,OAPAa,EAAAA,EAAAA,WAAU,KACRV,SAASW,iBAAiB,UAAWjB,GAAiB,GAC/C,KACLM,SAASY,oBAAoB,UAAWlB,GAAiB,KAE1D,CAACX,IAEGnB,EAAAA,cAACuB,EAAgB0B,OAAAC,OAAA,GAAKvB,EAAK,CAAER,YAAaA,KAErD,C","sources":["webpack://@marcnuri/presentations/./src/pages/presentations/2025-devbcn-model-context-protocol-servers/slide-150-mcp-servers.jsx","webpack://@marcnuri/presentations/./src/components/slide-controls/slide-controls.jsx"],"sourcesContent":["import React from 'react';\nimport slideControls from '../../../components/slide-controls/slide-controls';\nimport {DevBcn2025} from '../../../components';\n\nconst Box = ({icon, title}) => (\n  <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'space-evenly',\n    background: DevBcn2025.ORANGE + 'CC', width: '12rem', height: '12rem', borderRadius: '0.5rem'\n  }}>\n    <div style={{fontSize: '3rem'}}>{icon}</div>\n    <div style={{color: 'black', fontSize: '1.5rem', textAlign: 'center'}}>{title}</div>\n  </div>\n);\n\nconst Slide150 = () => {\n  return (\n    <DevBcn2025.TitleTemplate\n      slide={15}\n      title='Implementing MCP Servers'\n      subtitle={DevBcn2025.TITLE}\n    >\n      <div style={{height: '25vh', width: '100%', display: 'flex', alignItems: 'center', justifyContent: 'space-evenly'}}>\n        <Box icon='✨' title='Features' />\n        <Box icon='🏷️' title='Descriptions & Metadata' />\n        <Box icon='🧑‍💻' title='Programming Language' />\n        <Box icon='🚀' title='Deployment Strategies' />\n        <Box icon='📦' title='Distribution' />\n        <Box icon='🧠' title='Model Size (SLM vs LLM)' />\n        <Box icon='🧰' title='Tool Budget' />\n      </div>\n    </DevBcn2025.TitleTemplate>\n  );\n};\n\nexport default slideControls(Slide150,\n  `/presentations/${DevBcn2025.SLUG}/slide-140-mcp-timeline`,\n  `/presentations/${DevBcn2025.SLUG}/slide-160-mcp-servers-features`,\n  1);\n","import React, {useState, useEffect} from 'react';\nimport {navigate} from 'gatsby';\n\nexport const visibleClassNameFromStep = currentStep => step =>\n  ((currentStep < step) ? 'hidden' : 'visible');\n\nexport const visibleClassNameInStep = currentStep => step =>\n  ((currentStep !== step) ? 'hidden' : 'visible');\n\nexport const visibleClassNameUntilStep = currentStep => step =>\n  ((currentStep > step) ? 'hidden' : 'visible');\n\nfunction slideControls(WrappedComponent, previousPage, nextPage, totalSteps = 1) {\n  return ({...props}) => {\n    const [currentStep, setCurrentStep] = useState(1);\n    const handleOnKeyDown = (event) => {\n      switch (event.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          if (currentStep > 1) {\n            setCurrentStep(currentStep - 1);\n          } else {\n            navigate(previousPage);\n          }\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          if (currentStep < totalSteps) {\n            setCurrentStep(currentStep + 1);\n          } else {\n            navigate(nextPage);\n          }\n          break;\n        case 'f':\n          if (event.metaKey || event.ctrlKey) {\n            document.body.requestFullscreen({navigationUI: 'hide'}).catch(console.error)\n            event.preventDefault();\n          }\n          break;\n        case 'Esc':\n        case 'Escape':\n          if (document.fullscreenElement) {\n            document.exitFullscreen().catch(console.error);\n          }\n          navigate('/');\n          break;\n        default:\n      }\n    };\n    useEffect(() => {\n      document.addEventListener('keydown', handleOnKeyDown, false);\n      return () => {\n        document.removeEventListener('keydown', handleOnKeyDown, false);\n      };\n    }, [currentStep]);\n\n    return <WrappedComponent {...props} currentStep={currentStep} />;\n  }\n}\n\nexport default slideControls;\n"],"names":["Box","_ref","icon","title","React","style","display","flexDirection","alignItems","justifyContent","background","DevBcn2025","width","height","borderRadius","fontSize","color","textAlign","slideControls","Slide150","slide","subtitle","visibleClassNameFromStep","currentStep","step","visibleClassNameInStep","visibleClassNameUntilStep","WrappedComponent","previousPage","nextPage","totalSteps","props","setCurrentStep","useState","handleOnKeyDown","event","key","navigate","metaKey","ctrlKey","document","body","requestFullscreen","navigationUI","catch","console","error","preventDefault","fullscreenElement","exitFullscreen","useEffect","addEventListener","removeEventListener","Object","assign"],"sourceRoot":""}