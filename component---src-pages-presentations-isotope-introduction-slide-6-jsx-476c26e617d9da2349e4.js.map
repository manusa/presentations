{"version":3,"file":"component---src-pages-presentations-isotope-introduction-slide-6-jsx-476c26e617d9da2349e4.js","mappings":"uRAIaA,EAA2B,SAAAC,GAAW,OAAI,SAAAC,GAAI,OACvDD,EAAcC,EAAQ,SAAW,YAExBC,EAAyB,SAAAF,GAAW,OAAI,SAAAC,GAAI,OACrDD,IAAgBC,EAAQ,SAAW,YAE1BE,EAA4B,SAAAH,GAAW,OAAI,SAAAC,GAAI,OACxDD,EAAcC,EAAQ,SAAW,YAoDrC,MAlDA,SAAuBG,EAAkBC,EAAcC,EAAUC,GAC/D,YADyE,IAAVA,IAAAA,EAAa,GAC5E,YACE,WAAYC,GAAQ,IAAD,EAKgC,OAJjD,cAAMA,IAAM,MACPC,MAAQ,CACXT,YAAa,GAEf,EAAKU,gBAAkB,EAAKC,UAAUC,KCpB7B,SAAgCC,GAC7C,QAAa,IAATA,EACF,MAAM,IAAIC,eAAe,6DAE3B,OAAOD,EDgBwC,KAAM,GANrD,YAOG,kBAsCA,OAtCA,EAEDE,OAAA,WACE,OAAO,gBAACX,EAAgB,iBAAKY,KAAKR,MAAK,CAAER,YAAagB,KAAKP,MAAMT,gBAClE,EAEDiB,kBAAA,WACEC,SAASC,iBAAiB,UAAWH,KAAKN,iBAAiB,IAC5D,EAEDU,qBAAA,WACEF,SAASG,oBAAoB,UAAWL,KAAKN,iBAAiB,IAC/D,EAEDC,UAAA,SAAUW,GACR,OAAQA,EAAMC,KACZ,IAAK,OACL,IAAK,YACCP,KAAKP,MAAMT,YAAc,EAC3BgB,KAAKQ,SAAS,CAACxB,YAAagB,KAAKP,MAAMT,YAAc,KAErDyB,EAAAA,EAAAA,IAASpB,GAEX,MACF,IAAK,QACL,IAAK,aACCW,KAAKP,MAAMT,YAAcO,EAC3BS,KAAKQ,SAAS,CAACxB,YAAagB,KAAKP,MAAMT,YAAc,KAErDyB,EAAAA,EAAAA,IAASnB,GAEX,MACF,IAAK,MACL,IAAK,UACHmB,EAAAA,EAAAA,IAAS,OAId,EA7CH,CAAqBC,EAAAA,a,uDEFvB,WAAeC,EAAAA,EAAAA,KARA,WAAH,OACV,uBAAKC,UAAW,uBACd,uBAAKA,UAAW,SAAQ,wBACxB,uBAAKA,UAAW,eAKiB,6CAA8C","sources":["webpack://@marcnuri/presentations/./src/components/slide-controls/slide-controls.jsx","webpack://@marcnuri/presentations/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://@marcnuri/presentations/./src/pages/presentations/isotope-introduction/slide6.jsx"],"sourcesContent":["import React from 'react';\nimport {navigate} from 'gatsby';\n\n\nexport const visibleClassNameFromStep = currentStep => step =>\n  ((currentStep < step) ? 'hidden' : 'visible');\n\nexport const visibleClassNameInStep = currentStep => step =>\n  ((currentStep !== step) ? 'hidden' : 'visible');\n\nexport const visibleClassNameUntilStep = currentStep => step =>\n  ((currentStep > step) ? 'hidden' : 'visible');\n\nfunction slideControls(WrappedComponent, previousPage, nextPage, totalSteps = 1) {\n  return class extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        currentStep: 1\n      };\n      this.handleOnKeyDown = this.onKeyDown.bind(this);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} currentStep={this.state.currentStep} />;\n    }\n\n    componentDidMount() {\n      document.addEventListener('keydown', this.handleOnKeyDown, false);\n    }\n\n    componentWillUnmount() {\n      document.removeEventListener('keydown', this.handleOnKeyDown, false);\n    }\n\n    onKeyDown(event) {\n      switch (event.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          if (this.state.currentStep > 1) {\n            this.setState({currentStep: this.state.currentStep - 1});\n          } else {\n            navigate(previousPage);\n          }\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          if (this.state.currentStep < totalSteps) {\n            this.setState({currentStep: this.state.currentStep + 1});\n          } else {\n            navigate(nextPage);\n          }\n          break;\n        case 'Esc':\n        case 'Escape':\n          navigate('/');\n          break;\n        default:\n      }\n    }\n  };\n}\n\nexport default slideControls;\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import React from 'react';\nimport slideControls from '../../../components/slide-controls/slide-controls';\nimport './scaling.scss';\n\nconst Slide6 = () => (\n  <div className={'slide slide-scaling'}>\n    <div className={'title'}>Scaling Isotope Mail</div>\n    <div className={'content'}>\n    </div>\n  </div>\n);\n\nexport default slideControls(Slide6, '/presentations/isotope-introduction/slide5', '/presentations/isotope-introduction/slide-q-and-a');\n"],"names":["visibleClassNameFromStep","currentStep","step","visibleClassNameInStep","visibleClassNameUntilStep","WrappedComponent","previousPage","nextPage","totalSteps","props","state","handleOnKeyDown","onKeyDown","bind","self","ReferenceError","render","this","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","event","key","setState","navigate","React","slideControls","className"],"sourceRoot":""}