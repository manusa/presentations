{"version":3,"file":"component---src-pages-presentations-2025-devbcn-model-context-protocol-servers-slide-140-mcp-timeline-jsx-5b22a97902e1ea060000.js","mappings":"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","sources":["webpack://@marcnuri/presentations/./src/pages/presentations/2025-devbcn-model-context-protocol-servers/slide-140-mcp-timeline.jsx","webpack://@marcnuri/presentations/./src/components/slide-controls/slide-controls.jsx"],"sourcesContent":["import React from 'react';\nimport slideControls from '../../../components/slide-controls/slide-controls';\nimport {DevBcn2025} from '../../../components';\n\nconst containerWidth = '80vw';\nconst dotSize = '25px';\nconst lineHeight = '5px';\nconst activeColor = DevBcn2025.ORANGE;\nconst inactiveColor = '#AEB6BF'\n\n// https://codepen.io/cjl750/pen/mXbMyo (JS-Based - this one)\n// https://codepen.io/cjl750/pen/MXvYmg (CSS-Based)\nconst TimeLineDot = ({yearMonth, event, active=false}) => (\n  <div\n    className={`timeline-dot ${active ? 'timeline-dot--active' : ''}`}\n    data-description={yearMonth}\n    style={{\n      width: dotSize,\n      height: dotSize,\n      backgroundColor: active ? activeColor : inactiveColor,\n      position: 'relative',\n      borderRadius: '50%',\n      display: 'block',\n      appearance: 'none',\n    }}\n  >\n    <span\n      className={`timeline-dot-info`}\n      data-year-month={yearMonth}\n      data-event={event}\n      style={{\n        width: '1px',\n        height: '1px',\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        visibility: 'hidden'\n      }}\n    />\n  </div>\n);\n\nconst dots = [\n  {yearMonth: '2024-11', step: 2, event: 'Anthropic announcement\\nVersion 2024-11-05'},\n  {yearMonth: '2024-12', step: 3, event: 'Community integration:\\nGitHub, YouTube'},\n  {yearMonth: '2025-01', step: 4},\n  {yearMonth: '2025-02', step: 4, event: 'MCP server boom'},\n  {yearMonth: '2025-03', step: 5, event: 'Version 2025-03-26'},\n  {yearMonth: '2025-04', step: 6, event: 'OpenAI, Google, Microsoft, add MCP support'},\n  {yearMonth: '2025-05', step: 7, event: 'Windows 11 native MCP support'},\n  {yearMonth: '2025-06', step: 8, event: 'Version 2025-06-18'}\n];\n\nconst Slide140 = ({currentStep}) => {\n  return (\n    <DevBcn2025.SlideTemplate slide={14} title='What is MCP?'>\n      <style>{`\n        .devbcn-2025 .timeline-dot {\n          &::before, &::after {\n            content: '';\n            display: block;\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            background-color: ${inactiveColor};\n            width: calc(${containerWidth} / ${dots.length});\n            height: ${lineHeight};\n            z-index: -1;\n          }\n          &::before {\n            left: calc(-1 * (${containerWidth} / ${dots.length}) + (${dotSize} / 2));\n          }\n          &::after {\n            right: calc(-1 * (${containerWidth} / ${dots.length}) + (${dotSize} / 2));\n          }\n          &.timeline-dot--active::before, &.timeline-dot--active::after {\n            background-color: ${activeColor};\n          }\n          & .timeline-dot-info {\n            &::before, &::after {\n              visibility: visible;\n              position: absolute;\n              left: 50%;\n            }\n            &::after {\n              content: attr(data-year-month);\n              top: 5rem;\n              width: 11rem;\n              transform: translateX(-90%) rotateZ(-45deg);\n              text-align: right;\n            }\n            &::before {\n              content: attr(data-event);\n              font-size: 1.8rem;\n              top: -15rem;\n              width: 25rem;\n              transform: translateX(-10%) rotateZ(-45deg);\n            }\n          }\n          &.timeline-dot--active .timeline-dot-info {\n            color: ${activeColor};\n          }\n        }\n      `}</style>\n      <div style={{display: 'flex', flexDirection: 'column', gap: '1rem', height: '100%', alignItems: 'center'}}>\n        <h2>MCP Timeline</h2>\n        <div style={{flex: 1, width: '100%', overflow: 'hidden'}}>\n          <div /* timeline container*/ style={{\n            display: 'flex', justifyContent: 'space-around', alignItems: 'center', position: 'relative',\n            margin: '0 auto', top: '50%', width: containerWidth\n          }} >\n            {dots.map((dot, idx) => (<TimeLineDot key={dot.yearMonth} {...dot} active={currentStep >= dot.step}/>))}\n          </div>\n        </div>\n      </div>\n      {currentStep === 9 && <img\n        src={DevBcn2025.deloreanTransparent}\n        style={{\n          position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', width: '100%', height: '70%', objectFit: 'contain'\n        }}\n      />}\n    </DevBcn2025.SlideTemplate>\n  );\n};\n\nexport default slideControls(Slide140,\n  `/presentations/${DevBcn2025.SLUG}/slide-130-mcp-standard`,\n  `/presentations/${DevBcn2025.SLUG}/slide-150-mcp-servers`,\n  9);\n","import React, {useState, useEffect} from 'react';\nimport {navigate} from 'gatsby';\n\nexport const visibleClassNameFromStep = currentStep => step =>\n  ((currentStep < step) ? 'hidden' : 'visible');\n\nexport const visibleClassNameInStep = currentStep => step =>\n  ((currentStep !== step) ? 'hidden' : 'visible');\n\nexport const visibleClassNameUntilStep = currentStep => step =>\n  ((currentStep > step) ? 'hidden' : 'visible');\n\nfunction slideControls(WrappedComponent, previousPage, nextPage, totalSteps = 1) {\n  return ({...props}) => {\n    const [currentStep, setCurrentStep] = useState(1);\n    const handleOnKeyDown = (event) => {\n      switch (event.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          if (currentStep > 1) {\n            setCurrentStep(currentStep - 1);\n          } else {\n            navigate(previousPage);\n          }\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          if (currentStep < totalSteps) {\n            setCurrentStep(currentStep + 1);\n          } else {\n            navigate(nextPage);\n          }\n          break;\n        case 'f':\n          if (event.metaKey || event.ctrlKey) {\n            document.body.requestFullscreen({navigationUI: 'hide'}).catch(console.error)\n            event.preventDefault();\n          }\n          break;\n        case 'Esc':\n        case 'Escape':\n          if (document.fullscreenElement) {\n            document.exitFullscreen().catch(console.error);\n          }\n          navigate('/');\n          break;\n        default:\n      }\n    };\n    useEffect(() => {\n      document.addEventListener('keydown', handleOnKeyDown, false);\n      return () => {\n        document.removeEventListener('keydown', handleOnKeyDown, false);\n      };\n    }, [currentStep]);\n\n    return <WrappedComponent {...props} currentStep={currentStep} />;\n  }\n}\n\nexport default slideControls;\n"],"names":["containerWidth","dotSize","activeColor","DevBcn2025","inactiveColor","TimeLineDot","_ref","yearMonth","event","active","React","className","style","width","height","backgroundColor","position","borderRadius","display","appearance","top","left","transform","visibility","dots","step","slideControls","_ref2","currentStep","slide","title","length","flexDirection","gap","alignItems","flex","overflow","justifyContent","margin","map","dot","idx","Object","assign","key","src","objectFit","visibleClassNameFromStep","visibleClassNameInStep","visibleClassNameUntilStep","WrappedComponent","previousPage","nextPage","totalSteps","props","setCurrentStep","useState","handleOnKeyDown","navigate","metaKey","ctrlKey","document","body","requestFullscreen","navigationUI","catch","console","error","preventDefault","fullscreenElement","exitFullscreen","useEffect","addEventListener","removeEventListener"],"sourceRoot":""}