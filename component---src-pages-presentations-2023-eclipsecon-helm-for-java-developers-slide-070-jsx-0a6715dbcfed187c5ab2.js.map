{"version":3,"file":"component---src-pages-presentations-2023-eclipsecon-helm-for-java-developers-slide-070-jsx-0a6715dbcfed187c5ab2.js","mappings":"mPAGO,MAAMA,EAA2BC,GAAeC,GACnDD,EAAcC,EAAQ,SAAW,UAExBC,EAAyBF,GAAeC,GACjDD,IAAgBC,EAAQ,SAAW,UAE1BE,EAA4BH,GAAeC,GACpDD,EAAcC,EAAQ,SAAW,UAkDrC,KAhDA,SAAuBG,EAAkBC,EAAcC,EAAUC,GAC/D,YADyE,IAAVA,IAAAA,EAAa,GACrEC,IAAiB,OAAZC,GAAMD,EAChB,MAAM,EAACR,EAAY,EAACU,IAAkBC,EAAAA,EAAAA,UAAS,GACzCC,EAAmBC,IACvB,OAAQA,EAAMC,KACZ,IAAK,OACL,IAAK,YACCd,EAAc,EAChBU,EAAeV,EAAc,IAE7Be,EAAAA,EAAAA,IAASV,GAEX,MACF,IAAK,QACL,IAAK,aACCL,EAAcO,EAChBG,EAAeV,EAAc,IAE7Be,EAAAA,EAAAA,IAAST,GAEX,MACF,IAAK,KACCO,EAAMG,SAAWH,EAAMI,WACzBC,SAASC,KAAKC,kBAAkB,CAACC,aAAc,SAASC,MAAMC,QAAQC,OACtEX,EAAMY,kBAER,MACF,IAAK,MACL,IAAK,SACCP,SAASQ,mBACXR,SAASS,iBAAiBL,MAAMC,QAAQC,QAE1CT,EAAAA,EAAAA,IAAS,OAYf,OAPAa,EAAAA,EAAAA,WAAU,KACRV,SAASW,iBAAiB,UAAWjB,GAAiB,GAC/C,KACLM,SAASY,oBAAoB,UAAWlB,GAAiB,KAE1D,CAACZ,IAEG+B,EAAAA,cAAC3B,EAAgB4B,OAAAC,OAAA,GAAKxB,EAAK,CAAET,YAAaA,KAErD,C,oECtDA,MAAMkC,EAAc1B,IAAA,IAAC,MAAC2B,EAAQ,EAAC,SAAEC,EAAW,OAAM,SAAEC,GAAS7B,EAAA,OAC3DuB,EAAAA,cAAA,OAAKO,MAAO,CAACC,SAAU,WAAYC,IAAgB,EAARL,EAAH,MAAmBM,KAAiB,EAARN,EAAH,MAAmBO,OAAQ,mBAC1FX,EAAAA,cAACY,EAAAA,GAAI,CAACP,SAAUA,EAAUQ,YAAa,CAACC,OAAQ,IAAMR,KAiE1D,WAAeS,EAAAA,EAAAA,IA7DEC,IAEbhB,EAAAA,cAACiB,EAAAA,GAAAA,GAA4B,CAACC,MAAO,EAAGC,MAAM,gEAC5CnB,EAAAA,cAAA,OAAKoB,UAAU,eACbpB,EAAAA,cAAA,UAAI,eACJA,EAAAA,cAAA,OAAKO,MAAO,CAACc,QAAS,OAAQC,IAAK,OAAQC,WAAY,eACrDvB,EAAAA,cAACY,EAAAA,GAAI,CAACP,SAAS,QAAQQ,YAAa,CAACC,OAAQ,IAAK,qSAWlDd,EAAAA,cAAA,OAAKO,MAAO,CAACC,SAAU,WAAYgB,UAAW,UAC5CxB,EAAAA,cAACG,EAAW,KAAE,iLAQdH,EAAAA,cAACG,EAAW,CAACC,MAAO,GAAI,4KAQxBJ,EAAAA,cAACG,EAAW,CAACC,MAAO,GAAI,mLAQxBJ,EAAAA,cAACG,EAAW,CAACC,MAAO,GAAI,kLAU5BJ,EAAAA,cAACY,EAAAA,GAAI,CAACP,SAAS,SAAS,0DAU9B,kBAAkBY,EAAAA,GAAAA,eAClB,kBAAkBA,EAAAA,GAAAA,e","sources":["webpack://@marcnuri/presentations/./src/components/slide-controls/slide-controls.jsx","webpack://@marcnuri/presentations/./src/pages/presentations/2023-eclipsecon-helm-for-java-developers/slide-070.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {navigate} from 'gatsby';\n\nexport const visibleClassNameFromStep = currentStep => step =>\n  ((currentStep < step) ? 'hidden' : 'visible');\n\nexport const visibleClassNameInStep = currentStep => step =>\n  ((currentStep !== step) ? 'hidden' : 'visible');\n\nexport const visibleClassNameUntilStep = currentStep => step =>\n  ((currentStep > step) ? 'hidden' : 'visible');\n\nfunction slideControls(WrappedComponent, previousPage, nextPage, totalSteps = 1) {\n  return ({...props}) => {\n    const [currentStep, setCurrentStep] = useState(1);\n    const handleOnKeyDown = (event) => {\n      switch (event.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          if (currentStep > 1) {\n            setCurrentStep(currentStep - 1);\n          } else {\n            navigate(previousPage);\n          }\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          if (currentStep < totalSteps) {\n            setCurrentStep(currentStep + 1);\n          } else {\n            navigate(nextPage);\n          }\n          break;\n        case 'f':\n          if (event.metaKey || event.ctrlKey) {\n            document.body.requestFullscreen({navigationUI: 'hide'}).catch(console.error)\n            event.preventDefault();\n          }\n          break;\n        case 'Esc':\n        case 'Escape':\n          if (document.fullscreenElement) {\n            document.exitFullscreen().catch(console.error);\n          }\n          navigate('/');\n          break;\n        default:\n      }\n    };\n    useEffect(() => {\n      document.addEventListener('keydown', handleOnKeyDown, false);\n      return () => {\n        document.removeEventListener('keydown', handleOnKeyDown, false);\n      };\n    }, [currentStep]);\n\n    return <WrappedComponent {...props} currentStep={currentStep} />;\n  }\n}\n\nexport default slideControls;\n","import React from 'react';\nimport slideControls from '../../../components/slide-controls/slide-controls';\nimport {Code, EclipseCon2023} from '../../../components';\n\nconst StackedCard = ({index = 0, language = 'yaml', children}) => (\n  <div style={{position: 'absolute', top: `${index * 4}rem`, left: `${index * 8}rem`, border: '1px solid #777'}}>\n    <Code language={language} customStyle={{margin: 0}} >{children}</Code>\n  </div>\n  );\n\nconst Slide070 = () => {\n  return (\n    <EclipseCon2023.SlideTemplate slide={7} title='Deploying Java applications to Kubernetes - Challenges (III)'>\n      <div className='helm-charts'>\n        <h2>Helm charts</h2>\n        <div style={{display: 'flex', gap: '5rem', alignItems: 'flex-start'}}>\n          <Code language='shell' customStyle={{margin: 0}}>{`\n            ├── Chart.yaml\n            ├── LICENSE\n            ├── README.md\n            ├── templates\n            │   ├── config-map.yaml\n            │   ├── deployment.yaml\n            │   ├── secret.yaml\n            │   └── service.yaml\n            └── values.yaml\n          `}</Code>\n          <div style={{position: 'relative', minHeight: '35rem'}}>\n            <StackedCard>{`\n              kind: Deployment    \n              metadata:\n                name: app\n              spec:\n                replicas: 1\n              # ...\n            `}</StackedCard>\n            <StackedCard index={1}>{`\n              kind: Service       \n              metadata:\n                name: app\n              spec:\n                ports:\n              # ...\n            `}</StackedCard>\n            <StackedCard index={2}>{`\n              kind: ConfigMap\n              metadata:\n                name: app\n              data:\n               application.yml: >-\n              # ...\n            `}</StackedCard>\n            <StackedCard index={3}>{`\n              kind: Secret        \n              metadata:\n                name: app\n              type: Opaque\n              data:\n              # ...\n            `}</StackedCard>\n          </div>\n        </div>\n        <Code language='shell'>{`\n        $ helm create\n        $ helm push\n      `}</Code>\n      </div>\n    </EclipseCon2023.SlideTemplate>\n  );\n};\n\nexport default slideControls(Slide070,\n  `/presentations/${EclipseCon2023.SLUG}/slide-060`,\n  `/presentations/${EclipseCon2023.SLUG}/slide-080`);\n"],"names":["visibleClassNameFromStep","currentStep","step","visibleClassNameInStep","visibleClassNameUntilStep","WrappedComponent","previousPage","nextPage","totalSteps","_ref","props","setCurrentStep","useState","handleOnKeyDown","event","key","navigate","metaKey","ctrlKey","document","body","requestFullscreen","navigationUI","catch","console","error","preventDefault","fullscreenElement","exitFullscreen","useEffect","addEventListener","removeEventListener","React","Object","assign","StackedCard","index","language","children","style","position","top","left","border","Code","customStyle","margin","slideControls","Slide070","EclipseCon2023","slide","title","className","display","gap","alignItems","minHeight"],"sourceRoot":""}