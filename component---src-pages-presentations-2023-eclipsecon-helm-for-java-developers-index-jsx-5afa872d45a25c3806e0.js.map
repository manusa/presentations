{"version":3,"file":"component---src-pages-presentations-2023-eclipsecon-helm-for-java-developers-index-jsx-5afa872d45a25c3806e0.js","mappings":"+LAiBA,WAAeA,EAAAA,EAAAA,IATDC,IACZC,EAAAA,cAAA,OAAKC,UAAWC,EAAAA,GAAAA,IACdF,EAAAA,cAACG,EAAAA,EAAM,KACLH,EAAAA,cAAA,aAAQE,EAAAA,GAAAA,KAEVF,EAAAA,cAACE,EAAAA,GAAAA,GAAoB,OAIW,IAAK,kBAAkBA,EAAAA,GAAAA,e,mICdpD,MAAME,EAA2BC,GAAeC,GACnDD,EAAcC,EAAQ,SAAW,UAExBC,EAAyBF,GAAeC,GACjDD,IAAgBC,EAAQ,SAAW,UAE1BE,EAA4BH,GAAeC,GACpDD,EAAcC,EAAQ,SAAW,UAkDrC,KAhDA,SAAuBG,EAAkBC,EAAcC,EAAUC,GAC/D,YADyE,IAAVA,IAAAA,EAAa,GACrEC,IAAiB,OAAZC,GAAMD,EAChB,MAAM,EAACR,EAAY,EAACU,IAAkBC,EAAAA,EAAAA,UAAS,GACzCC,EAAmBC,IACvB,OAAQA,EAAMC,KACZ,IAAK,OACL,IAAK,YACCd,EAAc,EAChBU,EAAeV,EAAc,IAE7Be,EAAAA,EAAAA,IAASV,GAEX,MACF,IAAK,QACL,IAAK,aACCL,EAAcO,EAChBG,EAAeV,EAAc,IAE7Be,EAAAA,EAAAA,IAAST,GAEX,MACF,IAAK,KACCO,EAAMG,SAAWH,EAAMI,WACzBC,SAASC,KAAKC,kBAAkB,CAACC,aAAc,SAASC,MAAMC,QAAQC,OACtEX,EAAMY,kBAER,MACF,IAAK,MACL,IAAK,SACCP,SAASQ,mBACXR,SAASS,iBAAiBL,MAAMC,QAAQC,QAE1CT,EAAAA,EAAAA,IAAS,OAYf,OAPAa,EAAAA,EAAAA,WAAU,KACRV,SAASW,iBAAiB,UAAWjB,GAAiB,GAC/C,KACLM,SAASY,oBAAoB,UAAWlB,GAAiB,KAE1D,CAACZ,IAEGL,EAAAA,cAACS,EAAgB2B,OAAAC,OAAA,GAAKvB,EAAK,CAAET,YAAaA,KAErD,C","sources":["webpack://@marcnuri/presentations/./src/pages/presentations/2023-eclipsecon-helm-for-java-developers/index.jsx","webpack://@marcnuri/presentations/./src/components/slide-controls/slide-controls.jsx"],"sourcesContent":["import React from 'react';\nimport {Helmet} from 'react-helmet';\nimport {EclipseCon2023} from '../../../components';\nimport slideControls from '../../../components/slide-controls/slide-controls';\n\nimport '../../../components/2023-eclipsecon-helm-for-java-developers/styles/index.scss';\n\n\nconst Index = () => (\n  <div className={EclipseCon2023.CLASS_NAME}>\n    <Helmet>\n      <title>{EclipseCon2023.TITLE}</title>\n    </Helmet>\n    <EclipseCon2023.Cover />\n  </div>\n);\n\nexport default slideControls(Index, '/', `/presentations/${EclipseCon2023.SLUG}/slide-010`);\n","import React, {useState, useEffect} from 'react';\nimport {navigate} from 'gatsby';\n\nexport const visibleClassNameFromStep = currentStep => step =>\n  ((currentStep < step) ? 'hidden' : 'visible');\n\nexport const visibleClassNameInStep = currentStep => step =>\n  ((currentStep !== step) ? 'hidden' : 'visible');\n\nexport const visibleClassNameUntilStep = currentStep => step =>\n  ((currentStep > step) ? 'hidden' : 'visible');\n\nfunction slideControls(WrappedComponent, previousPage, nextPage, totalSteps = 1) {\n  return ({...props}) => {\n    const [currentStep, setCurrentStep] = useState(1);\n    const handleOnKeyDown = (event) => {\n      switch (event.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          if (currentStep > 1) {\n            setCurrentStep(currentStep - 1);\n          } else {\n            navigate(previousPage);\n          }\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          if (currentStep < totalSteps) {\n            setCurrentStep(currentStep + 1);\n          } else {\n            navigate(nextPage);\n          }\n          break;\n        case 'f':\n          if (event.metaKey || event.ctrlKey) {\n            document.body.requestFullscreen({navigationUI: 'hide'}).catch(console.error)\n            event.preventDefault();\n          }\n          break;\n        case 'Esc':\n        case 'Escape':\n          if (document.fullscreenElement) {\n            document.exitFullscreen().catch(console.error);\n          }\n          navigate('/');\n          break;\n        default:\n      }\n    };\n    useEffect(() => {\n      document.addEventListener('keydown', handleOnKeyDown, false);\n      return () => {\n        document.removeEventListener('keydown', handleOnKeyDown, false);\n      };\n    }, [currentStep]);\n\n    return <WrappedComponent {...props} currentStep={currentStep} />;\n  }\n}\n\nexport default slideControls;\n"],"names":["slideControls","Index","React","className","EclipseCon2023","Helmet","visibleClassNameFromStep","currentStep","step","visibleClassNameInStep","visibleClassNameUntilStep","WrappedComponent","previousPage","nextPage","totalSteps","_ref","props","setCurrentStep","useState","handleOnKeyDown","event","key","navigate","metaKey","ctrlKey","document","body","requestFullscreen","navigationUI","catch","console","error","preventDefault","fullscreenElement","exitFullscreen","useEffect","addEventListener","removeEventListener","Object","assign"],"sourceRoot":""}